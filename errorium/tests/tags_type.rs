//! Test the basic implementation functionality generated by `errorium::tags!` macro.

errorium::tags!(Tag1, Tag2);

#[test]
fn type_test() {
    let tag1 = Tag1::tag(std::fmt::Error);
    let tag2 = Tag2::tag(std::fmt::Error);

    let mut is_handled = false;
    Tag1::handle(&tag1, |_| {
        is_handled = true;
    });
    assert!(is_handled);

    let mut is_handled = false;
    Tag1::handle(&tag2, |_| {
        is_handled = true;
    });
    assert!(!is_handled);

    let mut is_handled = false;
    Tag2::handle(&tag1, |_| {
        is_handled = true;
    });
    assert!(!is_handled);

    let mut is_handled = false;
    Tag2::handle(&tag2, |_| {
        is_handled = true;
    });
    assert!(is_handled);
}

#[test]
fn tags_std_traits() {
    let err = std::fmt::Error;
    let tag1 = Tag1::tag(std::fmt::Error);
    let tag2 = Tag2::tag(std::fmt::Error);

    // check std::fmt::Display trait impl
    assert_eq!(format!("{err}"), format!("{tag1}"));
    assert_eq!(format!("{err}"), format!("{tag2}"));
    // assert_eq!(format!("{err}"), format!("{tag1:?}"));
    // assert_eq!(format!("{err}"), format!("{tag2:?}"));

    // check std::error::Error trait impl
    let _unused = Box::<dyn std::error::Error>::from(tag1);
    let _unused = Box::<dyn std::error::Error>::from(tag2);
}
